#!/usr/bin/env zsh
# Run the containers

function abort() {
    echo "$@"
    exit 1
}
function composeOpts() {
    dir=$1
    printf "--project-directory=$dir -f $dir/docker-compose.yml"
}
tokenFileLoc=$HOME/.config/digital-ocean/auth.key

function ensureNetwork() {
    # ensure the network exists
    docker network create web
}

function start() {
    ensureNetwork
    case "$1" in
        traefik)
                # start traefik
                docker-compose `composeOpts traefik` pull
                DO_AUTH_TOKEN=`< $tokenFileLoc` docker-compose `composeOpts traefik` up -d
        ;;
        bitwarden)
                # start bitwarden
                docker-compose `composeOpts bitwarden` pull
                docker-compose `composeOpts bitwarden` up -d
        ;;
        nextcloud)
            # start nextcloud
            docker-compose `composeOpts nextcloud` pull
            POSTGRES_PASSWORD=`cat nextcloud/secrets/pg-pw` docker-compose `composeOpts nextcloud` up -d
        ;;
        ghost)
            # start ghost
            docker-compose `composeOpts ghost` pull
            MYSQL_ROOT_PASSWORD=`< ghost/mysql.pw` \
                database__connection__password=`< ghost/mysql.pw` \
                mail__options__auth__pass=`< ghost/email.pw` \
                docker-compose `composeOpts ghost` up -d
        ;;
        jellyfin)
            # start traefik
            docker-compose `composeOpts jellyfin` pull
            docker-compose `composeOpts jellyfin` up -d
        ;;
        "")
            start traefik &
            start bitwarden &
            start nextcloud &
            start ghost &
            start jellyfin &
            wait
        ;;
        *) usage error: unkown service $1
        ;;
    esac
}

function stop() {
    service="$1"
    if test -z "$service"; then
        stop bitwarden &
        stop traefik &
        stop nextcloud &
        stop ghost &
        wait
    else
        docker-compose `composeOpts $service` down
        docker network rm web > /dev/null
    fi
}

function restart() {
    service="$1"
    if test -z "$service"; then
        restart bitwarden &
        restart traefik &
        restart nextcloud &
        restart ghost &
        wait
    else
        docker-compose `composeOpts $service` restart
    fi
}

function logs() {
    if test -z "$1"; then
        logs bitwarden &
        logs traefik &
        logs ghost &
        logs nextcloud &
        wait
    else
        docker-compose `composeOpts $1` logs -f &
    fi
}

function usage() {
    echo "$0 start|run|up|stop|down|restart|logs [service]"
    echo; echo service is optional. 'if no service is specified, the action is applied to all services.'
    echo 'start/run/up are aliases, they all update and bring up the service(s)'
    echo 'stop and down are aliases, they run `docker-compose down` on the service(s)'
    echo 'restart is the same as running `docker-compose restart` in the folder for the service(s)'
    echo 'logs is the same as running `docker-compose logs` in the folder of the service(s)'
    echo '    a nice side effect of this is that if no service is specified, the logs of all services '
    echo '   ' are shown together inline.
    if [ -z "$NO_ABORT" ]; then
      abort $@
    fi
}

action="$1"
service="$2"

case $action in
start)   start $service;;
run)     start $service;;
up)      start $service;;
stop)    stop $service;;
down)    stop $service;;
restart) restart $service;;
logs)    logs $service;;
"")      usage error: please specify an action ;;
*)       usage error: "no action known for $1";;
esac
